if Kingston.Parrying["Auto Parry"].Enabled then
    getgenv().Signal = Signal or {}

    -- Function to get player points
    function PlayerPoints()
        local tbl = {}
        for _, player in pairs(Players:GetPlayers()) do
            local userId = tostring(player.UserId)
            local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart and player == Localplayer then
                tbl[userId] = Camera:WorldToScreenPoint(humanoidRootPart.Position)
            end
        end

        print(unpack(tbl))
        table.foreach(tbl, print)
        return tbl
    end

    -- Function to perform the parry attempt
    function Parry()
        if Localplayer.Character then
            local worldToScreenPoint = Camera:WorldToScreenPoint(Localplayer.Character.HumanoidRootPart.Position)
            local args = {
                [1] = 0.5,
                [2] = workspace.CurrentCamera.CFrame,
                [3] = PlayerPoints(),
                [4] = {
                    [1] = worldToScreenPoint.X,
                    [2] = worldToScreenPoint.Y
                }
            }
            if Kingston.Parrying["Auto Parry"]["Print Information"] then
            warn("Players:", unpack(args[3]))
            end
            ParryRemote:FireServer(unpack(args))
        end
    end

    -- Initialize debounce and last player and time variables
    local Debounce = false
    local LastPlayer = false
    local LastTime = nil
    local LastTime = LastTime

    -- Function to anticipate
    function Anticipate(Time)
        if Debounce then
            return
        end

        if LastTime then
            local Sum = (Time - LastTime)
            if Sum >= -25 and Sum <= 25 then
                if Sum >= 25 or Sum <= -25 then
                    return true
                end
            end
        end

        LastTime = Time
    end

    -- Function to calculate projectile time
    function calculateProjectileTime(initialPosition, targetPosition, initialVelocity)
        local distance = (targetPosition - initialPosition).Magnitude
        local time = distance / initialVelocity.Magnitude
        return time
    end

    -- Function to calculate distance between projectile and object
    function calculateDistance(projectilePosition, objectPosition)
        return math.abs((projectilePosition - objectPosition).Magnitude)
    end

    -- Function to check if the object can intercept (parry) the projectile
    function canObjectParry(projectilePosition, objectPosition, projectileVelocity, objectVelocity)
        local timeToIntercept = calculateProjectileTime(projectilePosition, objectPosition, projectileVelocity)
        local distanceToIntercept = calculateDistance(projectilePosition + projectileVelocity * timeToIntercept, objectPosition + objectVelocity * timeToIntercept)
        local AnticipateResult = Anticipate(timeToIntercept)

        print("CanParry:", distanceToIntercept, timeToIntercept, AnticipateResult)

        local conditions = {
            (Anticipate and distanceToIntercept <= 60),
            (distanceToIntercept <= 14 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.12),
            (distanceToIntercept <= 13 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.12),
            (distanceToIntercept <= 12 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.12),
            (distanceToIntercept <= 11.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.1105),
            (distanceToIntercept <= 11.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.1107),
            (distanceToIntercept <= 11.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.1103),
            (distanceToIntercept <= 11 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.11),
            (distanceToIntercept <= 0.04 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.004),
            (distanceToIntercept <= 0.05 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.005),
            (distanceToIntercept <= 0.01 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.001),
            (distanceToIntercept <= 0.03 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.003),
            (distanceToIntercept <= 0.02 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.002),
            (distanceToIntercept <= 8.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.085),
            (distanceToIntercept <= 8.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.087),
            (distanceToIntercept <= 8 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.08),
            (distanceToIntercept <= 10 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.1),
            (distanceToIntercept <= 10.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.17),
            (distanceToIntercept <= 10.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.15),
            (distanceToIntercept <= 10.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.13),
            (distanceToIntercept <= 9 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.09),
            (distanceToIntercept <= 9.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.093),
            (distanceToIntercept <= 9.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.095),
            (distanceToIntercept <= 9.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.097),
            (distanceToIntercept <= 7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.07),
            (distanceToIntercept <= 7.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.077),
            (distanceToIntercept <= 7.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.075),
            (distanceToIntercept <= 7.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.073),
            (distanceToIntercept <= 6 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.06),
            (distanceToIntercept <= 6.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.065),
            (distanceToIntercept <= 6.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.063),
            (distanceToIntercept <= 6.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.067),
            (distanceToIntercept <= 5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.05),
            (distanceToIntercept <= 5.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.055),
            (distanceToIntercept <= 5.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.053),
            (distanceToIntercept <= 5.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.057),
            (distanceToIntercept <= 4 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.04),
            (distanceToIntercept <= 4.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.043),
            (distanceToIntercept <= 4.4 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.044),
            (distanceToIntercept <= 4.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.045),
            (distanceToIntercept <= 4.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.047),
            (distanceToIntercept <= 4.8 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.048),
            (distanceToIntercept <= 4.9 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.049),
            (distanceToIntercept <= 4.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.043),
            (distanceToIntercept <= 3.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.033),
            (distanceToIntercept <= 3.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.035),
            (distanceToIntercept <= 3.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.037),
            (distanceToIntercept <= 3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.03),
            (distanceToIntercept <= 2.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.025),
            (distanceToIntercept <= 2.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.023),
            (distanceToIntercept <= 2 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.02),
            (distanceToIntercept <= 2.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.027),
            (distanceToIntercept <= 2.8 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.028),
            (distanceToIntercept <= 2.9 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.029),
            (distanceToIntercept <= 1 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.01),
            (distanceToIntercept <= 1.4 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.014),
            (distanceToIntercept <= 1.6 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.016),
            (distanceToIntercept <= 1.7 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.017),
            (distanceToIntercept <= 1.5 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.015),
            (distanceToIntercept <= 1.3 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.013),
            (distanceToIntercept <= 1.2 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.012),
            (distanceToIntercept <= 1.1 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.011),
            (distanceToIntercept <= 0.1 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.001),
            (distanceToIntercept <= 0.06 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.006),
            (distanceToIntercept <= 0.07 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.007),
            (distanceToIntercept <= 0.08 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.008),
            (distanceToIntercept <= 0.011 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0011),
            (distanceToIntercept <= 0.012 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0012),
            (distanceToIntercept <= 0.013 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0013),
            (distanceToIntercept <= 0.014 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0014),
            (distanceToIntercept <= 0.015 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0015),
            (distanceToIntercept <= 0.016 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0016),
            (distanceToIntercept <= 0.017 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0017),
            (distanceToIntercept <= 0.018 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0018),
            (distanceToIntercept <= 0.009 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0009),
            (distanceToIntercept <= 0.006 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0006),
            (distanceToIntercept <= 0.005 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0005),
            (distanceToIntercept <= 0.003 and
                timeToIntercept >= 0.00000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0003),
            (distanceToIntercept <= 0.001 and
                timeToIntercept >= 0.0000000000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0001),
            (distanceToIntercept <= 0.0001 and
                timeToIntercept >= 0.0000000000000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.00001),
            (distanceToIntercept <= 0.0005 and
                timeToIntercept >= 0.000000000000000000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.00005),
            (distanceToIntercept <= 0.00005 and
                timeToIntercept >= 0.0000000000000000000000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.000005),
            (distanceToIntercept <= 0 and
                timeToIntercept >=
                    0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 and
                timeToIntercept <= 0.0000001)
        }

        for _, condition in pairs(conditions) do
            if condition then
                return true
            end
        end
    end

    -- Function to choose a new focused ball
    function chooseNewFocusedBall()
        local balls = workspace.Balls:GetChildren()
        for _, ball in ipairs(balls) do
            if ball:GetAttribute("realBall") ~= nil and ball:GetAttribute("realBall") == true then
                return ball
            end
        end
    end

    -- Function to iterate through balls and perform actions
    function foreach(Ball)
        local focusedBall = chooseNewFocusedBall()
        if Ball and not Debounce then
            for i, v in pairs(Signal) do
                table.remove(Signal, i)
                v:Disconnect()
            end
            local function Calculation(Delta)
                local start, humanoidRootPart, player = os.clock(), Localplayer.Character and Localplayer.Character:FindFirstChild("HumanoidRootPart"), Players:FindFirstChild(Ball:GetAttribute("target"))

                if Ball and Ball:FindFirstChild("zoomies") and Ball:GetAttribute("target") == Localplayer.Name and humanoidRootPart and not Debounce then
                    local timeToReachTarget = calculateProjectileTime(Ball.Position, humanoidRootPart.Position, Ball.Velocity)
                    local distanceToTarget = calculateDistance(Ball.Position, humanoidRootPart.Position)
                    local canParry = canObjectParry(Ball.Position, humanoidRootPart.Position, Ball.Velocity, humanoidRootPart.Velocity)

                    if Kingston.Parrying["Auto Parry"]["Print Information"] then
                    warn(timeToReachTarget, "Distance:", canParry)
                    end
                    
                    if canParry then
                        Parry()
                        LastTime = LastTime
                        Debounce = true
                        local Signal = RunService.Stepped:Connect(function()
                            if Kingston.Parrying["Auto Parry"]["Print Information"] then
                            warn("False:", Ball:GetAttribute("target"), os.clock() - start, Ball, workspace.Dead:FindFirstChild(Localplayer.Name))
                            end
                            if Ball:GetAttribute("target") ~= Localplayer.Name or os.clock() - start >= 1.25 or not Ball or not workspace.Alive:FindFirstChild(Localplayer.Name) then
                                if Kingston.Parrying["Auto Parry"]["Print Information"] then
                                warn("Set to false")
                                end
                                Debounce = false
                                Signal:Disconnect()
                            end
                        end)
                    end
                elseif Ball and Ball:FindFirstChild("zoomies") and Ball:GetAttribute("target") ~= Localplayer.Name and humanoidRootPart then
                    -- local HumanoidRootPart = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
                    -- local Distance = CalculateDistance(HumanoidRootPart, Delta)
                    LastPlayer = player
                end
            end
            Signal[#Signal + 1] = RunService.Stepped:Connect(Calculation)
        end
    end

    Localplayer.CharacterRemoving:Connect(
        function()
            if distanceVisualizer then
                distanceVisualizer:Destroy()
                distanceVisualizer = nil
            end
        end
    )

    -- Function to initialize the auto parry
    function Init()
        Balls.ChildAdded:Connect(foreach)

        for _, ball in pairs(Balls:GetChildren()) do
            foreach(ball)
        end
    end

    -- Call the initialization function
    Init()
end
